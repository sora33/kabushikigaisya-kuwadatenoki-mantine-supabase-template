on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    paths:
      - '**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  node-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      - name: Install dependencies
        run: yarn
      - name: 🔦 Run linter & formatter
        run: yarn biome:check
      - name: 🪐 Check TypeScript
        run: yarn type-check


  prisma-migrate-diff:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_URL: ${{ secrets.DIRECT_URL }}
    outputs:
      dryrun_result: ${{ steps.dryrun.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - id: dryrun
        run: |
          result=$(npx prisma migrate diff --from-schema-datamodel prisma/schema.prisma --to-schema-datasource prisma/schema.prisma --exit-code)
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$result" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  summary:
    needs: [node-check, prisma-migrate-diff]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const jobs = ${{ toJson(needs) }};
            let summary = '## 📌 Actionsの結果 \n\n';

            summary += '### CIの結果 \n\n';

            for (const [job, result] of Object.entries(jobs)) {
              const status = result.result;
              const emoji = status === 'success' ? '🙆‍♂️' : '🙅‍♀️';
              summary += `- **${job}**: ${emoji} (${status})\n`;
            }

            summary += '\n### prisma migrate diff の結果 \n\n';
            const dryRunResult = ${{ toJson(needs.prisma-migrate-diff.outputs.dryrun_result) }};

            if (dryRunResult.trim()) {
              summary += '```\n' + dryRunResult + '\n```\n';
            } else {
              summary += '変更がないため、DBは更新されません。\n';
            }

            summary += '\n### まとめ\n';
            const overallStatus = Object.values(jobs).every(job => job.result === 'success');
            summary += overallStatus
              ? '全てのチェックが成功しました！素晴らしい仕事です！🥳 \n'
              : '一部のチェックが失敗しました。上記の詳細を確認してください😅 \n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
